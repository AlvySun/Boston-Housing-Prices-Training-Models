import matplotlib.pyplot as plt
import numpy as np
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn import linear_model
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor

# Python code that splits the original Boston housing dataset into two subsets: training/validation (80%), and test (20%).
boston = load_boston()
bostonX,bostonY = load_boston(return_X_y=True)
boston_FeatureName = boston['feature_names']
print("the Boston dataset training data is loaded")
print("the dataset contains", bostonY.shape, "training data")
print("There are", boston_FeatureName.shape, "Features, they are:")
print(boston_FeatureName)
print("The training data has the size of", bostonX.shape)

# Python code that uses an additional split to create a validation dataset or Python code that implements a cross-validation approach to tune
# the Random Forest model hyperparameters.
seed = 5
X_train_val, X_test, Y_train_val, Y_test = train_test_split(bostonX, bostonY, test_size=.20, random_state=seed);
print("The selected random seed is {}".format(seed))
print("The training dataset is split into Two parts")
print("Training/Validation dataset :", X_train_val.shape, Y_train_val.shape)
print("Test dataset :", X_test.shape, Y_test.shape)

seed = 4
X_train, X_val, Y_train, Y_val = train_test_split(X_train_val, Y_train_val,test_size=.20, random_state=seed);
print("The selected random seed is {}".format(seed))
print("The training dataset is split into Two parts")
print("Training dataset :", X_train.shape, Y_train.shape)
print("Validation dataset :", X_val.shape, Y_val.shape)

# Python code that uses RandomForestRegressor to train, validate and test a Random Forest model.

# Inputs: A list of hyperparameters, and their new values, that were modified from their default values.
# Outputs: The score value of the final model for each of the datasets: training, validation and test.
regr = RandomForestRegressor(n_estimators=10, criterion='mse', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='auto', max_leaf_nodes=None, min_impurity_decrease=0.0, bootstrap=True, oob_score=False, n_jobs=None, random_state=None, verbose=0, warm_start=False, ccp_alpha=0.0, max_samples=None)
regr.fit(X_train, Y_train)
print("The final training score is: ",regr.score(X_train, Y_train))
print("The validation score is: ",regr.score(X_val, Y_val))
print("The test score is: ",regr.score(X_test, Y_test))

pred_test = regr.predict(X_test)
_ = plt.figure(figsize=(8,6))
_ = plt.plot(pred_test,"r.-")
_ = plt.plot(Y_test,"b.-")
_ = plt.title("Comparison between the Prediction and Label",fontsize=15)
_ = plt.ylabel("House Price",fontsize=15)
_ = plt.legend(["prediction","label"],fontsize=15)
_ = plt.figure(figsize=(8,8))
_ = plt.scatter(Y_test, pred_test)
line = range(50)
_ = plt.plot(line,line,'r')
_ = plt.xlabel("Label",fontsize=15)
_ = plt.ylabel("Predict",fontsize=15)

# Python code that uses Gradient Boosting learning algorithm.
regr = GradientBoostingRegressor(loss='ls', learning_rate=0.1, n_estimators=50,
subsample=1.0, criterion='friedman_mse', min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_depth=3, min_impurity_decrease=0.0, init=None, random_state=None, max_features=None, alpha=0.9, verbose=0, max_leaf_nodes=None, warm_start=False, validation_fraction=0.1, n_iter_no_change=None, tol=0.0001, ccp_alpha=0.0)
regr.fit(X_train, Y_train)
print("The final training score is: ",regr.score(X_train, Y_train))
print("The validation score is: ",regr.score(X_val, Y_val))
print("The test score is: ",regr.score(X_test, Y_test))

pred_test = regr.predict(X_test)
_ = plt.figure(figsize=(8,6))
_ = plt.plot(pred_test,"r.-")
_ = plt.plot(Y_test,"b.-")
_ = plt.title("Comparison between the Prediction and Label",fontsize=15)
_ = plt.ylabel("House Price",fontsize=15)
_ = plt.legend(["prediction","label"],fontsize=15)
_ = plt.figure(figsize=(8,8))
_ = plt.scatter(Y_test, pred_test)
line = range(50)
_ = plt.plot(line,line,'r')
_ = plt.xlabel("Label",fontsize=15)
_ = plt.ylabel("Predict",fontsize=15)

